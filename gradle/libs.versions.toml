[versions]
springAiVersion = "1.0.1"
springAiAlibabaVersion = "1.0.0.3"
springBootVersion = "3.5.5"
springBootAdminVersion = "3.5.1"
springDependencyManagementVersion = "1.1.7"
springCloudVersion = "2025.0.0"
springGrpcVersion = "0.10.0"
springdocVersion = "2.8.9"
mcpVersion = "0.10.0"
nettyVersion = "4.1.124.Final"
cosidVersion = "2.13.3"
redissonVersion = "3.51.0"
kotlinVersion = "2.2.10"
groovyVersion = "4.0.28"
hutoolVersion = "5.8.39"
mockitoVersion = "5.18.0"
seleniumVersion = "4.35.0"
seleniumWdmVersion = "6.2.0"
playwrightVersion = "1.54.0"
mybatisVersion = "3.5.19"
mybatisSpringVersion = "3.0.5"
mybatisSpringStarterVersion = "3.0.5"
mybatisPlusVersion = "3.5.12"
jsqlparserPlusVersion = "5.3"
shardingSpherePlusVersion = "5.5.2"
okhttpVersion = "5.1.0"
swaggerVersion = "2.2.36"
bouncycastleVersion = "1.81"
checkerQualVersion = "3.49.5"
jsonSchemaGeneratorVersion = "4.38.0"
gradleSpotbugsVersion = "6.2.5"
gradleNativeVersion = "0.10.6"
gradleOSDetectorVersion = "1.7.3"

[plugins]
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "springDependencyManagementVersion" }
spring-boot = { id = "org.springframework.boot", version.ref = "springBootVersion" }
gradle-spotbugs = { id = "com.github.spotbugs", version.ref = "gradleSpotbugsVersion" }
gradle-native = { id = "org.graalvm.buildtools.native", version.ref = "gradleNativeVersion" }
gradle-osdetector = { id = "com.google.osdetector", version.ref = "gradleOSDetectorVersion" }

[libraries]
spring-ai-bom = { module = "org.springframework.ai:spring-ai-bom", version.ref = "springAiVersion" }
spring-ai-alibaba-bom = { module = "com.alibaba.cloud.ai:spring-ai-alibaba-bom", version.ref = "springAiAlibabaVersion" }
spring-boot-bom = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "springBootVersion" }
spring-cloud-bom = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "springCloudVersion" }
spring-grpc-bom = { module = "org.springframework.grpc:spring-grpc-dependencies", version.ref = "springGrpcVersion" }
jsonschema-generator-bom = { module = "com.github.victools:jsonschema-generator-bom", version.ref = "jsonSchemaGeneratorVersion" }
kotlin-bom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlinVersion" }
mcp-bom = { module = "io.modelcontextprotocol.sdk:mcp-bom", version.ref = "mcpVersion" }
groovy-bom = { module = "org.apache.groovy:groovy-bom", version.ref = "groovyVersion" }
mockito-bom = { module = "org.mockito:mockito-bom", version.ref = "mockitoVersion" }

# Spring
spring-tx = { module = "org.springframework:spring-tx" }
spring-aop = { module = "org.springframework:spring-aop" }
spring-web = { module = "org.springframework:spring-web" }
spring-webmvc = { module = "org.springframework:spring-webmvc" }
spring-context = { module = "org.springframework:spring-context" }
spring-websocket = { module = "org.springframework:spring-websocket" }
spring-amqp = { module = "org.springframework.amqp:spring-amqp" }
spring-rabbit = { module = "org.springframework.amqp:spring-rabbit" }

# Spring Boot
spring-boot = { module = "org.springframework.boot:spring-boot" }
spring-boot-autoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor" }
spring-boot-devtools = { module = "org.springframework.boot:spring-boot-devtools" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-boot-starter-aop = { module = "org.springframework.boot:spring-boot-starter-aop" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-jdbc = { module = "org.springframework.boot:spring-boot-starter-jdbc" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-starter-data-elasticsearch = { module = "org.springframework.boot:spring-boot-starter-data-elasticsearch" }
spring-boot-starter-amqp = { module = "org.springframework.boot:spring-boot-starter-amqp" }
spring-boot-starter-quartz = { module = "org.springframework.boot:spring-boot-starter-quartz" }
spring-boot-starter-websocket = { module = "org.springframework.boot:spring-boot-starter-websocket" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot-starter-oauth2-client = { module = "org.springframework.boot:spring-boot-starter-oauth2-client" }
spring-boot-starter-oauth2-resource-server = { module = "org.springframework.boot:spring-boot-starter-oauth2-resource-server" }
spring-boot-starter-oauth2-authorization-server = { module = "org.springframework.boot:spring-boot-starter-oauth2-authorization-server" }

# Spring Data
spring-data-commons = { module = "org.springframework.data:spring-data-commons" }
spring-data-relational = { module = "org.springframework.data:spring-data-relational" }
spring-data-jpa = { module = "org.springframework.data:spring-data-jpa" }
spring-data-elasticsearch = { module = "org.springframework.data:spring-data-elasticsearch" }

# Spring Security
spring-security-core = { module = "org.springframework.security:spring-security-core" }
spring-security-web = { module = "org.springframework.security:spring-security-web" }
spring-security-test = { module = "org.springframework.security:spring-security-test" }
spring-security-oauth2-jose = { module = "org.springframework.security:spring-security-oauth2-jose" }
spring-security-oauth2-core = { module = "org.springframework.security:spring-security-oauth2-core" }
spring-security-oauth2-resource-server = { module = "org.springframework.security:spring-security-oauth2-resource-server" }

# Spring Cloud
spring-cloud-commons = { module = "org.springframework.cloud:spring-cloud-commons" }
spring-cloud-starter-gateway-server = { module = "org.springframework.cloud:spring-cloud-starter-gateway-server-webmvc" }
spring-cloud-openfeign-core = { module = "org.springframework.cloud:spring-cloud-openfeign-core" }
spring-cloud-starter-consul-discovery = { module = "org.springframework.cloud:spring-cloud-starter-consul-discovery" }
spring-cloud-starter-consul-config = { module = "org.springframework.cloud:spring-cloud-starter-consul-config" }
spring-cloud-starter-loadbalancer = { module = "org.springframework.cloud:spring-cloud-starter-loadbalancer" }
spring-cloud-starter-openfeign = { module = "org.springframework.cloud:spring-cloud-starter-openfeign" }

# Spring AI
spring-ai-model = { module = "org.springframework.ai:spring-ai-model" }
spring-ai-model-chat-memory-repository-jdbc = { module = "org.springframework.ai:spring-ai-model-chat-memory-repository-jdbc" }
spring-ai-client-chat = { module = "org.springframework.ai:spring-ai-client-chat" }
spring-ai-deepseek = { module = "org.springframework.ai:spring-ai-deepseek" }
spring-ai-openai = { module = "org.springframework.ai:spring-ai-openai" }
spring-ai-mcp = { module = "org.springframework.ai:spring-ai-mcp" }
spring-ai-rag = { module = "org.springframework.ai:spring-ai-rag" }
spring-ai-advisors-vector-store = { module = "org.springframework.ai:spring-ai-advisors-vector-store" }
spring-ai-elasticsearch-store = { module = "org.springframework.ai:spring-ai-elasticsearch-store" }
spring-ai-redis-store = { module = "org.springframework.ai:spring-ai-redis-store" }
spring-ai-starter-model-openai = { module = "org.springframework.ai:spring-ai-starter-model-openai" }
spring-ai-starter-model-deepseek = { module = "org.springframework.ai:spring-ai-starter-model-deepseek" }
spring-ai-starter-mcp-client = { module = "org.springframework.ai:spring-ai-starter-mcp-client" }
spring-ai-starter-mcp-server = { module = "org.springframework.ai:spring-ai-starter-mcp-server" }
spring-ai-starter-mcp-server-webmvc = { module = "org.springframework.ai:spring-ai-starter-mcp-server-webmvc" }
spring-ai-alibaba-starter-dashscope = { module = "com.alibaba.cloud.ai:spring-ai-alibaba-starter-dashscope", version.ref = "springAiAlibabaVersion" }

# Spring Boot Admin
spring-boot-admin-bom = { module = "de.codecentric:spring-boot-admin-dependencies", version.ref = "springBootAdminVersion" }
spring-boot-admin-starter-client = { module = "de.codecentric:spring-boot-admin-starter-client", version.ref = "springBootAdminVersion" }
spring-boot-admin-starter-server = { module = "de.codecentric:spring-boot-admin-starter-server", version.ref = "springBootAdminVersion" }

# MyBatis
mybatis = { module = "org.mybatis:mybatis", version.ref = "mybatisVersion" }
mybatis-spring = { module = "org.mybatis:mybatis-spring", version.ref = "mybatisSpringVersion" }
mybatis-spring-boot-starter = { module = "org.mybatis.spring.boot:mybatis-spring-boot-starter", version.ref = "mybatisSpringStarterVersion" }
mybatis-plus-bom = { module = "com.baomidou:mybatis-plus-bom", version.ref = "mybatisPlusVersion" }
mybatis-plus-annotation = { module = "com.baomidou:mybatis-plus-annotation", version.ref = "mybatisPlusVersion" }
mybatis-plus-core = { module = "com.baomidou:mybatis-plus-core", version.ref = "mybatisPlusVersion" }
mybatis-plus-extension = { module = "com.baomidou:mybatis-plus-extension", version.ref = "mybatisPlusVersion" }
mybatis-plus-jsqlparser = { module = "com.baomidou:mybatis-plus-jsqlparser", version.ref = "mybatisPlusVersion" }
mybatis-plus-spring-boot-starter = { module = "com.baomidou:mybatis-plus-spring-boot3-starter", version.ref = "mybatisPlusVersion" }

# Hibernate
hibernate-core = { module = "org.hibernate.orm:hibernate-core" }
hibernate-core-annotation-processor = { module = "org.hibernate.orm:hibernate-jpamodelgen" }
hibernate-validator = { module = "org.hibernate.validator:hibernate-validator" }
hibernate-validator-annotation-processor = { module = "org.hibernate.validator:hibernate-validator-annotation-processor" }

# Database
pgsql = { module = "org.postgresql:postgresql" }
mysql = { module = "com.mysql:mysql-connector-j" }
jsqlparser = { module = "com.github.jsqlparser:jsqlparser", version.ref = "jsqlparserPlusVersion" }
sharding = { module = "org.apache.shardingsphere:shardingsphere-jdbc", version.ref = "shardingSpherePlusVersion" }

# Netty
netty-bom = { module = "io.netty:netty-bom", version.ref = "nettyVersion" }
netty-resolver-dns-native-macos = { module = "io.netty:netty-resolver-dns-native-macos", version.ref = "nettyVersion" }

# Redis
jedis = { module = "redis.clients:jedis" }
redisson = { module = "org.redisson:redisson", version.ref = "redissonVersion" }
redisson-spring-data = { module = "org.redisson:redisson-spring-data-35", version.ref = "redissonVersion" }
redisson-spring-boot-starter = { module = "org.redisson:redisson-spring-boot-starter", version.ref = "redissonVersion" }
cosid-bom = { module = "me.ahoo.cosid:cosid-bom", version.ref = "cosidVersion" }
cosid-core = { module = "me.ahoo.cosid:cosid-core", version.ref = "cosidVersion" }
cosid-spring-redis = { module = "me.ahoo.cosid:cosid-spring-redis", version.ref = "cosidVersion" }
cosid-spring-boot-starter = { module = "me.ahoo.cosid:cosid-spring-boot-starter", version.ref = "cosidVersion" }

# Selenium * Playwright
playwright = { module = "com.microsoft.playwright:playwright", version.ref = "playwrightVersion" }
selenium-api = { module = "org.seleniumhq.selenium:selenium-api", version.ref = "seleniumVersion" }
selenium-java = { module = "org.seleniumhq.selenium:selenium-java", version.ref = "seleniumVersion" }
selenium-web-driver-manager = { module = "io.github.bonigarcia:webdrivermanager", version.ref = "seleniumWdmVersion" }

# PDF & Excel & Image
poi = { module = "org.apache.poi:poi", version = "5.4.1" }
poi-ooxml = { module = "org.apache.poi:poi-ooxml", version = "5.4.1" }
poi-ooxml-lite = { module = "org.apache.poi:poi-ooxml-lite", version = "5.4.1" }
poi-scratchpad = { module = "org.apache.poi:poi-scratchpad", version = "5.4.1" }
fastexcel = { module = "cn.idev.excel:fastexcel", version = "1.2.0" }
pdfbox = { module = "org.apache.pdfbox:pdfbox", version = "3.0.5" }
fontbox = { module = "org.apache.pdfbox:fontbox", version = "3.0.5" }
x-easypdf-pdfbox = { module = "org.dromara:x-easypdf-pdfbox", version = "3.4.3" }
thumbnailator = { module = "net.coobird:thumbnailator", version = "0.4.20" }
imageio-jpeg = { module = "com.twelvemonkeys.imageio:imageio-jpeg", version = "3.12.0" }
zxing-core = { module = "com.google.zxing:core", version = "3.5.3" }
zxing-javase = { module = "com.google.zxing:javase", version = "3.5.3" }
tika-core = { module = "org.apache.tika:tika-core", version = "3.2.2" }
tika-parsers-standard-package = { module = "org.apache.tika:tika-parsers-standard-package", version = "3.2.2" }

# SDK
minio = { module = "io.minio:minio", version = "8.5.17" }
s3 = { module = "software.amazon.awssdk:s3", version = "2.32.29" }
weixin-java-cp = { module = "com.github.binarywang:weixin-java-cp", version = "4.7.7.B" }
weixin-java-mp = { module = "com.github.binarywang:weixin-java-mp", version = "4.7.7.B" }
weixin-java-miniapp = { module = "com.github.binarywang:weixin-java-miniapp", version = "4.7.7.B" }
dingtalk = { module = "com.aliyun:dingtalk", version = "2.2.33" }
facebody = { module = "com.aliyun:facebody20191230", version = "5.1.2" }
dysmsapi = { module = "com.aliyun:dysmsapi20170525", version = "4.1.2" }
alimt = { module = "com.aliyun:alimt20181012", version = "1.5.1" }
aliyun-java-sdk-core = { module = "com.aliyun:aliyun-java-sdk-core", version = "4.7.6" }
dashscope-sdk-java = { module = "com.alibaba:dashscope-sdk-java", version = "2.21.5" }
aliyun-sdk-oss = { module = "com.aliyun.oss:aliyun-sdk-oss", version = "3.18.3" }
cos_api = { module = "com.qcloud:cos_api", version = "5.6.251" }
tencentcloud-sdk-java-common = { module = "com.tencentcloudapi:tencentcloud-sdk-java-common", version = "3.1.1326" }
tencentcloud-sdk-java-sms = { module = "com.tencentcloudapi:tencentcloud-sdk-java-sms", version = "3.1.1281" }
tencentcloud-sdk-java-tmt = { module = "com.tencentcloudapi:tencentcloud-sdk-java-tmt", version = "3.1.1297" }
tencentcloud-sdk-java-iai = { module = "com.tencentcloudapi:tencentcloud-sdk-java-iai", version = "3.1.1321" }
tencentcloud-sdk-java-hunyuan = { module = "com.tencentcloudapi:tencentcloud-sdk-java-hunyuan", version = "3.1.1318" }
oapi-sdk = { module = "com.larksuite.oapi:oapi-sdk", version = "2.4.23" }
openai-java = { module = "com.openai:openai-java", version = "3.1.2" }
telegrambots-client = { module = "org.telegram:telegrambots-client", version = "9.0.0" }
telegrambots-abilities = { module = "org.telegram:telegrambots-abilities", version = "9.0.0" }

jakarta-annotation = { module = "jakarta.annotation:jakarta.annotation-api" }
jakarta-validation = { module = "jakarta.validation:jakarta.validation-api" }
jakarta-persistence = { module = "jakarta.persistence:jakarta.persistence-api" }
jakarta-json = { module = "jakarta.json:jakarta.json-api" }
jakarta-mail = { module = "jakarta.mail:jakarta.mail-api" }
jakarta-servlet = { module = "jakarta.servlet:jakarta.servlet-api" }
jakarta-json-bind = { module = "jakarta.json.bind:jakarta.json.bind-api" }
jakarta-websocket = { module = "jakarta.websocket:jakarta.websocket-api" }
jakarta-transaction = { module = "jakarta.transaction:jakarta.transaction-api" }

commons-io = { module = "commons-io:commons-io", version = "2.20.0" }
commons-net = { module = "commons-net:commons-net", version = "3.12.0" }
commons-codec = { module = "commons-codec:commons-codec", version = "1.19.0" }
commons-beanutils = { module = "commons-beanutils:commons-beanutils", version = "1.11.0" }
commons-pool = { module = "org.apache.commons:commons-pool2", version = "2.12.1" }
commons-email = { module = "org.apache.commons:commons-email", version = "1.6.0" }
commons-csv = { module = "org.apache.commons:commons-csv", version = "1.14.1" }
commons-text = { module = "org.apache.commons:commons-text", version = "1.14.0" }
commons-lang = { module = "org.apache.commons:commons-lang3", version = "3.18.0" }
commons-compress = { module = "org.apache.commons:commons-compress", version = "1.28.0" }
commons-collections = { module = "org.apache.commons:commons-collections4", version = "4.5.0" }

jodconverter-local = { module = "org.jodconverter:jodconverter-local", version = "4.4.10" }
jodconverter-local-lo = { module = "org.jodconverter:jodconverter-local-lo", version = "4.4.10" }
jodconverter-remote = { module = "org.jodconverter:jodconverter-remote", version = "4.4.10" }
jodconverter-spring-boot-starter = { module = "org.jodconverter:jodconverter-spring-boot-starter", version = "4.4.10" }
libreoffice-juh = { module = "org.libreoffice:juh", version = "24.8.4" }
libreoffice-jurt = { module = "org.libreoffice:jurt", version = "24.8.4" }
libreoffice-ridl = { module = "org.libreoffice:ridl", version = "24.8.4" }
libreoffice-unoil = { module = "org.libreoffice:unoil", version = "24.8.4" }

json = { module = "org.json:json", version = "20250517" }
gson = { module = "com.google.code.gson:gson", version = "2.13.1" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" }
jackson-datatype-jdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8" }

hutool-bom = { module = "cn.hutool:hutool-bom", version.ref = "hutoolVersion" }
hutool-captcha = { module = "cn.hutool:hutool-captcha" }
hutool-dfa = { module = "cn.hutool:hutool-dfa" }
hutool-extra = { module = "cn.hutool:hutool-extra" }
hutool-http = { module = "cn.hutool:hutool-http" }

okhttp = { module = "com.squareup.okhttp3:okhttp", version = "okhttpVersion" }
okhttp-sse = { module = "com.squareup.okhttp3:okhttp-sse", version = "okhttpVersion" }
okhttp-jvm = { module = "com.squareup.okhttp3:okhttp-jvm", version = "okhttpVersion" }
okhttp-logging-interceptor = { module = "com.squareup.okhttp3:logging-interceptor", version = "okhttpVersion" }
hc = { module = "org.apache.httpcomponents.client5:httpclient5" }

# HttpComponents
httpcore-core = { module = "org.apache.httpcomponents:httpcore", version = "4.4.16" }
httpcore-nio = { module = "org.apache.httpcomponents:httpcore-nio", version = "4.4.16" }
httpclient = { module = "org.apache.httpcomponents:httpclient", version = "4.5.14" }
httpasyncclient = { module = "org.apache.httpcomponents:httpasyncclient", version = "4.1.5" }
httpmime = { module = "org.apache.httpcomponents:httpmime", version = "4.5.14" }

# Job
quartz = { module = "org.quartz-scheduler:quartz" }
quartz-jobs = { module = "org.quartz-scheduler:quartz-jobs" }
xxl-job-core = { module = "com.xuxueli:xxl-job-core", version = "3.2.0" }

# Others
slf4j-api = { module = "org.slf4j:slf4j-api" }
ognl = { module = "ognl:ognl", version = "3.4.7" }
asm = { module = "org.ow2.asm:asm", version = "9.8" }
aspectjweaver = { module = "org.aspectj:aspectjweaver" }
dom4j = { module = "org.dom4j:dom4j", version = "2.2.0" }
jsoup = { module = "org.jsoup:jsoup", version = "1.21.2" }
okio = { module = "com.squareup.okio:okio", version = "3.16.0" }
joda-time = { module = "joda-time:joda-time", version = "2.14.0" }
geoip = { module = "com.maxmind.geoip2:geoip2", version = "4.3.1" }
guava = { module = "com.google.guava:guava", version = "33.4.8-jre" }
nimbus-jose-jwt = { module = "com.nimbusds:nimbus-jose-jwt", version = "10.4.2" }
oauth2-oidc-sdk = { module = "com.nimbusds:oauth2-oidc-sdk", version = "11.27.1" }
checker-qual = { module = "org.checkerframework:checker-qual", version.ref = "checkerQualVersion" }
objenesis = { module = "org.objenesis:objenesis", version = "3.4" }
annotations = { module = "org.jetbrains:annotations", version = "26.0.2" }
spotbugs-annotations = { module = "com.github.spotbugs:spotbugs-annotations", version = "4.9.4" }
logback-logstash-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version = "8.1" }
logback-loki-appender = { module = "com.github.loki4j:loki-logback-appender", version = "2.0.0" }

# Thymeleaf
thymeleaf = { module = "org.thymeleaf:thymeleaf" }
thymeleaf-spring = { module = "org.thymeleaf:thymeleaf-spring6" }

# MapStruct & Lombok
lombok = { module = "org.projectlombok:lombok", version = "1.18.38" }
mapstruct = { module = "org.mapstruct:mapstruct", version = "1.6.3" }
mapstruct-processor = { module = "org.mapstruct:mapstruct-processor", version = "1.6.3" }
lombok-mapstruct-binding = { module = "org.projectlombok:lombok-mapstruct-binding", version = "0.2.0" }

# Swagger
swagger-annotations = { module = "io.swagger.core.v3:swagger-annotations", version.ref = "swaggerVersion" }
swagger-annotations-jakarta = { module = "io.swagger.core.v3:swagger-annotations-jakarta", version.ref = "swaggerVersion" }
swagger-models-jakarta = { module = "io.swagger.core.v3:swagger-models-jakarta", version.ref = "swaggerVersion" }
springdoc-starter-webmvc = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdocVersion" }

# JUnit
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine" }

[bundles]
baseCore = ["mapstruct", "lombok"]
baseCommons = ["slf4j-api", "guava", "nimbus-jose-jwt", "geoip", "asm", "ognl", "aspectjweaver", "thymeleaf", "joda-time", "okio", "dom4j", "hibernate-validator"]
baseApacheCommons = ["commons-io", "commons-codec", "commons-compress", "commons-text", "commons-pool", "commons-beanutils", "commons-lang", "commons-collections"]
baseApacheCommonsExtra = ["commons-email", "commons-net", "commons-csv"]
baseTest = ["spring-security-test", "spring-boot-starter-test", "junit-jupiter-api", "junit-jupiter-engine", "jakarta-servlet"]
baseAnnotationProcessor = ["lombok-mapstruct-binding", "mapstruct-processor", "lombok", "hibernate-core-annotation-processor", "hibernate-validator-annotation-processor"]
baseJakarta = ["jakarta-annotation", "jakarta-validation", "jakarta-persistence"]
baseJakartaCompile = ["jakarta-mail", "jakarta-servlet", "jakarta-websocket", "jakarta-transaction", "jakarta-json", "jakarta-json-bind"]

html = ["jsoup"]
sharding = ["sharding"]
database = ["pgsql", "mysql"]
pdf = ["pdfbox", "fontbox", "x-easypdf-pdfbox", "tika-core", "tika-parsers-standard-package"]
image = ["thumbnailator", "imageio-jpeg", "zxing-core", "zxing-javase"]
hutool = ["hutool-captcha", "hutool-dfa", "hutool-extra", "hutool-http"]
excel = ["poi", "poi-ooxml", "poi-ooxml-lite", "poi-scratchpad", "fastexcel"]
http = ["okhttp", "okhttp-sse", "okhttp-jvm", "okhttp-logging-interceptor", "hc"]
json = ["jackson-databind", "jackson-annotations", "jackson-datatype-jsr310", "jackson-datatype-jdk8", "gson", "json"]
logging = ["logback-logstash-encoder", "logback-loki-appender"]
ai = ["openai-java", "dashscope-sdk-java", "tencentcloud-sdk-java-common", "tencentcloud-sdk-java-hunyuan"]

# Spring Boot
springCore = ["spring-aop", "spring-context", "spring-tx", "spring-web", "spring-webmvc", "spring-data-commons", "spring-data-relational", "spring-ai-model", "spring-cloud-commons"]
springBootDevtools = ["spring-boot-devtools"]
springBootAnnotationProcessor = ["spring-boot-configuration-processor"]
springBootCore = ["spring-boot", "spring-boot-autoconfigure", "spring-boot-starter-actuator"]
springBootCoreStarter = ["spring-boot-starter-aop", "spring-boot-starter-thymeleaf", "spring-boot-starter-validation", "spring-boot-starter-web"]

# Spring Security
springSecurityCore = ["spring-security-core", "spring-security-web", "spring-security-oauth2-jose", "spring-security-oauth2-core", "spring-security-oauth2-resource-server"]
springSecurityCoreStarter = ["spring-boot-starter-security"]
springSecurityAuthorizationServerStarter = ["spring-boot-starter-oauth2-authorization-server"]
springSecurityResourceServerStarter = ["spring-boot-starter-oauth2-resource-server"]
springSecurityClientStarter = ["spring-boot-starter-oauth2-client"]

# Spring Cloud
springCloudCore = ["spring-cloud-commons", "spring-cloud-openfeign-core"]
springCloudCoreStarter = ["spring-cloud-starter-consul-discovery", "spring-cloud-starter-consul-config", "spring-cloud-starter-loadbalancer", "spring-cloud-starter-openfeign"]
springCloudGatewayServerStarter = ["spring-cloud-starter-gateway-server"]

# Spring AI
springAiCore = ["spring-ai-client-chat", "spring-ai-deepseek", "spring-ai-openai", "spring-ai-model-chat-memory-repository-jdbc", "spring-ai-mcp", "spring-ai-rag", "spring-ai-advisors-vector-store", "spring-ai-elasticsearch-store", "spring-ai-redis-store"]
springAiCoreStarter = ["spring-ai-starter-model-openai", "spring-ai-starter-model-deepseek", "spring-ai-starter-mcp-client", "spring-ai-starter-mcp-server", "spring-ai-starter-mcp-server-webmvc"]
springAiAlibabaStarter = ["spring-ai-alibaba-starter-dashscope"]

# Spring Boot Admin
springBootAdminClientStarter = ["spring-boot-admin-starter-client"]
springBootAdminServerStarter = ["spring-boot-admin-starter-server"]

# Mybatis
mybatis = ["mybatis", "mybatis-spring", "mybatis-plus-annotation", "mybatis-plus-core", "mybatis-plus-extension", "mybatis-plus-jsqlparser", "jsqlparser"]
mybatisStarter = ["mybatis-spring-boot-starter", "mybatis-plus-spring-boot-starter"]

# Hibernate
hibernate = ["spring-data-jpa", "hibernate-core"]
hibernateStarter = ["spring-boot-starter-jdbc", "spring-boot-starter-data-jpa"]

# Redis
redis = ["jedis", "redisson", "redisson-spring-data", "cosid-core", "cosid-spring-redis", "netty-resolver-dns-native-macos"]
redisStarter = ["redisson-spring-boot-starter", "cosid-spring-boot-starter"]

# RabbitMQ
rabbit = ["spring-amqp", "spring-rabbit"]
rabbitStarter = ["spring-boot-starter-amqp"]

# Elasticsearch
elastic = ["spring-data-elasticsearch"]
elasticStarter = ["spring-boot-starter-data-elasticsearch"]

# WebSocket
websocket = ["spring-websocket"]
websocketStarter = ["spring-boot-starter-websocket"]

# Thymeleaf
thymeleaf = ["thymeleaf", "thymeleaf-spring"]

# 定时任务
quartz = ["quartz", "quartz-jobs"]
quartzStarter = ["spring-boot-starter-quartz"]
xxlJobCore = ["xxl-job-core"]
xxlJobStarter = ["xxl-job-core"]

# 爬虫
selenium = ["selenium-api", "selenium-java", "selenium-web-driver-manager"]
playwright = ["playwright"]

# 接口文档
swagger = ["swagger-annotations", "swagger-annotations-jakarta", "swagger-models-jakarta"]
swaggerStarter = ["swagger-annotations-jakarta", "swagger-models-jakarta", "springdoc-starter-webmvc"]

# 文档转换
office = ["jodconverter-local", "jodconverter-local-lo", "jodconverter-remote", "libreoffice-juh", "libreoffice-jurt", "libreoffice-ridl", "libreoffice-unoil"]
officeStarter = ["jodconverter-spring-boot-starter"]

# 开放接口
lark = ["oapi-sdk"]
dingtalk = ["dingtalk"]
wechat = ["weixin-java-cp", "weixin-java-mp", "weixin-java-miniapp"]
im = ["weixin-java-cp", "weixin-java-mp", "weixin-java-miniapp", "oapi-sdk", "dingtalk"]
minio = ["minio"]
cos = ["cos_api"]
oss = ["aliyun-sdk-oss"]
s3 = ["s3"]
storage = ["cos_api", "minio", "aliyun-sdk-oss", "aliyun-java-sdk-core", "s3"]
telegram = ["telegrambots-client", "telegrambots-abilities"]
facebody = ["facebody", "tencentcloud-sdk-java-iai", "tencentcloud-sdk-java-common"]
translate = ["alimt", "tencentcloud-sdk-java-tmt"]
sms = ["dysmsapi", "tencentcloud-sdk-java-sms", "tencentcloud-sdk-java-common"]
